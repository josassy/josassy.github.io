{"version":3,"sources":["Header.js","App.js","serviceWorker.js","index.js","images/jl-logo-white-noborders.svg"],"names":["Logo","href","src","logo","alt","id","Header","handleWindowSizeChange","setState","width","window","innerWidth","state","isOpen","addEventListener","this","removeEventListener","isMobile","className","menuClicked","handleClick","bind","color","React","Component","BodyContent","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"0SAIA,SAASA,IACP,OACE,uBAAGC,KAAK,KAAI,yBAAKC,IAAKC,IAAMC,IAAI,GAAGC,GAAG,iB,IAuD3BC,E,YAlDb,aAAe,IAAD,8BACZ,+CAcFC,uBAAyB,WACvB,EAAKC,SAAS,CAAEC,MAAOC,OAAOC,cAd9B,EAAKC,MAAQ,CACXC,QAAQ,EACRJ,MAAOC,OAAOC,YAJJ,E,iFASZD,OAAOI,iBAAiB,SAAUC,KAAKR,0B,6CAGvCG,OAAOM,oBAAoB,SAAUD,KAAKR,0B,oCAQ1CQ,KAAKP,SAAS,CACZK,QAASE,KAAKH,MAAMC,W,+BAId,IAEFI,EADaF,KAAKH,MAAhBH,OACkB,IAE1B,OACE,gCACA,yBAAKS,UAAYD,EAAW,GAAK,WAC7B,kBAACjB,EAAD,MACA,kBAAC,IAAD,CACEa,OAAQE,KAAKH,MAAMC,OACnBM,YAAaJ,KAAKK,YAAYC,KAAKN,MACnCO,MAAM,YAER,wBAAIJ,UAAYH,KAAKH,MAAMC,OAAS,SAAW,IAC7C,4BAAI,uBAAGZ,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,eACJ,4BAAI,uBAAGA,KAAK,KAAR,cACJ,4BAAI,uBAAGA,KAAK,KAAR,mB,GA3CKsB,IAAMC,W,MCN3B,SAASC,IACP,OACE,yBAAKP,UAAU,gBACb,0CACA,oHAAyF,uBAAGjB,KAAK,yCAAR,YAAzF,M,IAgBSyB,E,iLATX,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,MACA,kBAACO,EAAD,W,GALUF,IAAMC,WCDJG,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,kBEnInBC,EAAOC,QAAU,IAA0B,sD","file":"static/js/main.5090fe50.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from './images/jl-logo-white-noborders.svg';\r\nimport HamburgerMenu from 'react-hamburger-menu';\r\n\r\nfunction Logo () {\r\n  return (\r\n    <a href=\"/\"><img src={logo} alt=\"\" id=\"header-logo\"/></a>\r\n  )\r\n}\r\n\r\nclass Header extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isOpen: false,\r\n      width: window.innerWidth,\r\n    };\r\n  }\r\n\r\n  componentDidMount () {\r\n    window.addEventListener('resize', this.handleWindowSizeChange);\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.handleWindowSizeChange);\r\n  }\r\n\r\n  handleWindowSizeChange = () => {\r\n    this.setState({ width: window.innerWidth });\r\n  };\r\n\r\n  handleClick() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { width }  = this.state;\r\n    const isMobile = width <= 600;\r\n\r\n    return (\r\n      <header>\r\n      <nav className={ isMobile ? \"\" : \"desktop\" }>\r\n          <Logo />\r\n          <HamburgerMenu\r\n            isOpen={this.state.isOpen}\r\n            menuClicked={this.handleClick.bind(this)}\r\n            color='#ffffff'\r\n          />\r\n          <ul className={ this.state.isOpen ? \"active\" : \"\" }>\r\n            <li><a href=\"/\">Home</a></li>\r\n            <li><a href=\"/\">Experience</a></li>\r\n            <li><a href=\"/\">Education</a></li>\r\n            <li><a href=\"/\">Contact</a></li>\r\n          </ul>\r\n        </nav>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header from './Header.js';\r\nimport './App.scss';\r\n\r\nfunction BodyContent() {\r\n  return (\r\n    <div className=\"page-content\">\r\n      <h1>Hey there!</h1>\r\n      <p>This page is still under development. In the meantime, feel free to take a look at my <a href=\"http://linkedin.com/in/josiahlansford\">LinkedIn</a>!</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <BodyContent />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/jl-logo-white-noborders.0142d865.svg\";"],"sourceRoot":""}